5.4 主选项

‘-f 格式 (输入/输出)’
强制指定输入输出文件格式。一般输入文件格式自动识别，输出文件格式根据扩展名猜测，所以一般不需要本选项。

‘-i 文件名 (输入)’
输入文件名。

‘-y (全局)’
静默覆写输出文件。

‘-n (全局)’
不静默覆写输出文件，如果输出文件存在立即退出。

‘-c[:流] 编码 (输入/输出,每流)’
‘-codec[:流] 编码 (输入/输出,每流)’
对一个或多个流选择输入输出文件的解编码器。codec是编码器名称，或者copy：不重新编码。

例如

   
ffmpeg -i INPUT -map 0 -c:v libx264 -c:a copy OUTPUT
用libx264压制所有视频流，复制所有音频流

每个流用一个-c，

 	
ffmpeg -i INPUT -map 0 -c copy -c:v:1 libx264 -c:a:137 libvorbis OUTPUT
除了第二个视频流用libx264编码外全部复制，第138个音频流用libvorbis编码。

‘-t 时长 (输出)’
到时长后停止输出。时长可以是秒数，也可以是hh:mm:ss[.xxx]格式。

-to 和 -t 互斥， -t 优先。

‘-to 位置 (输出)’
到位置后停止输出。位置可以是秒数，也可以是hh:mm:ss[.xxx]格式。

-to 和 -t 互斥， -t 优先。

‘-fs 体积限制 (输出)’
字节数的输出文件体积限制。

‘-ss position (input/output)’
When used as an input option (before -i), seeks in this input file to position. When used as an output option (before an output filename), decodes but discards input until the timestamps reach position. This is slower, but more accurate.

position may be either in seconds or in hh:mm:ss[.xxx] form.

‘-itsoffset offset (input)’
Set the input time offset in seconds. [-]hh:mm:ss[.xxx] syntax is also supported. The offset is added to the timestamps of the input files. Specifying a positive offset means that the corresponding streams are delayed by offset seconds.

‘-timestamp time (output)’
Set the recording timestamp in the container. The syntax for time is:

 	
now|([(YYYY-MM-DD|YYYYMMDD)[T|t| ]]((HH:MM:SS[.m...])|(HHMMSS[.m...]))[Z|z])
If the value is "now" it takes the current time. Time is local time unless ’Z’ or ’z’ is appended, in which case it is interpreted as UTC. If the year-month-day part is not specified it takes the current year-month-day.

‘-metadata[:metadata_specifier] key=value (output,per-metadata)’
Set a metadata key/value pair.

An optional metadata_specifier may be given to set metadata on streams or chapters. See -map_metadata documentation for details.

This option overrides metadata set with -map_metadata. It is also possible to delete metadata by using an empty value.

For example, for setting the title in the output file:

 	
ffmpeg -i in.avi -metadata title="my title" out.flv
To set the language of the first audio stream:

 	
ffmpeg -i INPUT -metadata:s:a:1 language=eng OUTPUT
‘-target type (output)’
Specify target file type (vcd, svcd, dvd, dv, dv50). type may be prefixed with pal-, ntsc- or film- to use the corresponding standard. All the format options (bitrate, codecs, buffer sizes) are then set automatically. You can just type:

 	
ffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg
Nevertheless you can specify additional options as long as you know they do not conflict with the standard, as in:

 	
ffmpeg -i myfile.avi -target vcd -bf 2 /tmp/vcd.mpg
‘-dframes number (output)’
Set the number of data frames to record. This is an alias for -frames:d.

‘-frames[:stream_specifier] framecount (output,per-stream)’
Stop writing to the stream after framecount frames.

‘-q[:stream_specifier] q (output,per-stream)’
‘-qscale[:stream_specifier] q (output,per-stream)’
Use fixed quality scale (VBR). The meaning of q is codec-dependent.


‘-filter[:stream_specifier] filtergraph (output,per-stream)’
Create the filtergraph specified by filtergraph and use it to filter the stream.

filtergraph is a description of the filtergraph to apply to the stream, and must have a single input and a single output of the same type of the stream. In the filtergraph, the input is associated to the label in, and the output to the label out. See the ffmpeg-filters manual for more information about the filtergraph syntax.

See the -filter_complex option if you want to create filtergraphs with multiple inputs and/or outputs.

‘-filter_script[:stream_specifier] filename (output,per-stream)’
This option is similar to ‘-filter’, the only difference is that its argument is the name of the file from which a filtergraph description is to be read.

‘-pre[:stream_specifier] preset_name (output,per-stream)’
Specify the preset for matching stream(s).

‘-stats (global)’
Print encoding progress/statistics. It is on by default, to explicitly disable it you need to specify -nostats.

‘-progress url (global)’
Send program-friendly progress information to url.

Progress information is written approximately every second and at the end of the encoding process. It is made of "key=value" lines. key consists of only alphanumeric characters. The last key of a sequence of progress information is always "progress".

‘-stdin’
Enable interaction on standard input. On by default unless standard input is used as an input. To explicitly disable interaction you need to specify -nostdin.

Disabling interaction on standard input is useful, for example, if ffmpeg is in the background process group. Roughly the same result can be achieved with ffmpeg ... < /dev/null but it requires a shell.

‘-debug_ts (global)’
Print timestamp information. It is off by default. This option is mostly useful for testing and debugging purposes, and the output format may change from one version to another, so it should not be employed by portable scripts.

See also the option -fdebug ts.

‘-attach filename (output)’
Add an attachment to the output file. This is supported by a few formats like Matroska for e.g. fonts used in rendering subtitles. Attachments are implemented as a specific type of stream, so this option will add a new stream to the file. It is then possible to use per-stream options on this stream in the usual way. Attachment streams created with this option will be created after all the other streams (i.e. those created with -map or automatic mappings).

Note that for Matroska you also have to set the mimetype metadata tag:

 	
ffmpeg -i INPUT -attach DejaVuSans.ttf -metadata:s:2 mimetype=application/x-truetype-font out.mkv
(assuming that the attachment stream will be third in the output file).

‘-dump_attachment[:stream_specifier] filename (input,per-stream)’
Extract the matching attachment stream into a file named filename. If filename is empty, then the value of the filename metadata tag will be used.

E.g. to extract the first attachment to a file named ’out.ttf’:

 	
ffmpeg -dump_attachment:t:0 out.ttf -i INPUT
To extract all attachments to files determined by the filename tag:

 	
ffmpeg -dump_attachment:t "" -i INPUT
Technical note – attachments are implemented as codec extradata, so this option can actually be used to extract extradata from any stream, not just attachments.
